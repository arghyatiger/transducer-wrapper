# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_transducer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_transducer')
    _transducer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_transducer', [dirname(__file__)])
        except ImportError:
            import _transducer
            return _transducer
        try:
            _mod = imp.load_module('_transducer', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _transducer = swig_import_helper()
    del swig_import_helper
else:
    import _transducer
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _transducer.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _transducer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _transducer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _transducer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _transducer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _transducer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _transducer.SwigPyIterator_copy(self)

    def next(self):
        return _transducer.SwigPyIterator_next(self)

    def __next__(self):
        return _transducer.SwigPyIterator___next__(self)

    def previous(self):
        return _transducer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _transducer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _transducer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _transducer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _transducer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _transducer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _transducer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _transducer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _transducer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Transducer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transducer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transducer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _transducer.delete_Transducer
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _transducer.new_Transducer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def insertSingleTransduction(self, tag, source):
        return _transducer.Transducer_insertSingleTransduction(self, tag, source)

    def insertNewSingleTransduction(self, tag, source):
        return _transducer.Transducer_insertNewSingleTransduction(self, tag, source)

    def insertTransducer(self, source, t, epsilon_tag=0):
        return _transducer.Transducer_insertTransducer(self, source, t, epsilon_tag)

    def linkStates(self, source, target, tag):
        return _transducer.Transducer_linkStates(self, source, target, tag)

    def isFinal(self, state):
        return _transducer.Transducer_isFinal(self, state)

    def recognise(self, *args):
        return _transducer.Transducer_recognise(self, *args)

    def setFinal(self, state, value=True):
        return _transducer.Transducer_setFinal(self, state, value)

    def getInitial(self):
        return _transducer.Transducer_getInitial(self)

    def closure(self, state, epsilon_tag=0):
        return _transducer.Transducer_closure(self, state, epsilon_tag)

    def joinFinals(self, epsilon_tag=0):
        return _transducer.Transducer_joinFinals(self, epsilon_tag)

    def getFinals(self):
        return _transducer.Transducer_getFinals(self)

    def getTransitions(self):
        return _transducer.Transducer_getTransitions(self)

    def reverse(self, epsilon_tag=0):
        return _transducer.Transducer_reverse(self, epsilon_tag)

    def show(self, *args):
        return _transducer.Transducer_show(self, *args)

    def determinize(self, epsilon_tag=0):
        return _transducer.Transducer_determinize(self, epsilon_tag)

    def minimize(self, epsilon_tag=0):
        return _transducer.Transducer_minimize(self, epsilon_tag)

    def optional(self, epsilon_tag=0):
        return _transducer.Transducer_optional(self, epsilon_tag)

    def oneOrMore(self, epsilon_tag=0):
        return _transducer.Transducer_oneOrMore(self, epsilon_tag)

    def zeroOrMore(self, epsilon_tag=0):
        return _transducer.Transducer_zeroOrMore(self, epsilon_tag)

    def clear(self):
        return _transducer.Transducer_clear(self)

    def hasNoFinals(self):
        return _transducer.Transducer_hasNoFinals(self)

    def size(self):
        return _transducer.Transducer_size(self)

    def numberOfTransitions(self):
        return _transducer.Transducer_numberOfTransitions(self)

    def isEmpty(self, *args):
        return _transducer.Transducer_isEmpty(self, *args)

    def getStateSize(self, state):
        return _transducer.Transducer_getStateSize(self, state)

    def write(self, output, decalage=0):
        return _transducer.Transducer_write(self, output, decalage)

    def read(self, input, decalage=0):
        return _transducer.Transducer_read(self, input, decalage)

    def serialise(self, serialised):
        return _transducer.Transducer_serialise(self, serialised)

    def deserialise(self, serialised):
        return _transducer.Transducer_deserialise(self, serialised)

    def unionWith(self, my_a, t, epsilon_tag=0):
        return _transducer.Transducer_unionWith(self, my_a, t, epsilon_tag)

    def appendDotStar(self, loopback_symbols, epsilon_tag=0):
        return _transducer.Transducer_appendDotStar(self, loopback_symbols, epsilon_tag)

    def moveLemqsLast(self, alphabet, epsilon_tag=0):
        return _transducer.Transducer_moveLemqsLast(self, alphabet, epsilon_tag)

    def copyWithTagsFirst(self, start, group_label, alphabet, epsilon_tag=0):
        return _transducer.Transducer_copyWithTagsFirst(self, start, group_label, alphabet, epsilon_tag)

    def intersect(self, t, my_a, t_a, epsilon_tag=0):
        return _transducer.Transducer_intersect(self, t, my_a, t_a, epsilon_tag)
Transducer_swigregister = _transducer.Transducer_swigregister
Transducer_swigregister(Transducer)

class Compression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Compression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Compression, name)
    __repr__ = _swig_repr
    if _newclass:
        multibyte_write = staticmethod(_transducer.Compression_multibyte_write)
    else:
        multibyte_write = _transducer.Compression_multibyte_write
    if _newclass:
        multibyte_read = staticmethod(_transducer.Compression_multibyte_read)
    else:
        multibyte_read = _transducer.Compression_multibyte_read
    if _newclass:
        wstring_write = staticmethod(_transducer.Compression_wstring_write)
    else:
        wstring_write = _transducer.Compression_wstring_write
    if _newclass:
        wstring_read = staticmethod(_transducer.Compression_wstring_read)
    else:
        wstring_read = _transducer.Compression_wstring_read
    if _newclass:
        string_write = staticmethod(_transducer.Compression_string_write)
    else:
        string_write = _transducer.Compression_string_write
    if _newclass:
        string_read = staticmethod(_transducer.Compression_string_read)
    else:
        string_read = _transducer.Compression_string_read

    def __init__(self):
        this = _transducer.new_Compression()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _transducer.delete_Compression
    __del__ = lambda self: None
Compression_swigregister = _transducer.Compression_swigregister
Compression_swigregister(Compression)

def Compression_multibyte_write(*args):
    return _transducer.Compression_multibyte_write(*args)
Compression_multibyte_write = _transducer.Compression_multibyte_write

def Compression_multibyte_read(*args):
    return _transducer.Compression_multibyte_read(*args)
Compression_multibyte_read = _transducer.Compression_multibyte_read

def Compression_wstring_write(str, output):
    return _transducer.Compression_wstring_write(str, output)
Compression_wstring_write = _transducer.Compression_wstring_write

def Compression_wstring_read(input):
    return _transducer.Compression_wstring_read(input)
Compression_wstring_read = _transducer.Compression_wstring_read

def Compression_string_write(str, output):
    return _transducer.Compression_string_write(str, output)
Compression_string_write = _transducer.Compression_string_write

def Compression_string_read(input):
    return _transducer.Compression_string_read(input)
Compression_string_read = _transducer.Compression_string_read

class Alphabet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alphabet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Alphabet, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _transducer.delete_Alphabet
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _transducer.new_Alphabet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def includeSymbol(self, s):
        return _transducer.Alphabet_includeSymbol(self, s)

    def __call__(self, *args):
        return _transducer.Alphabet___call__(self, *args)

    def isSymbolDefined(self, s):
        return _transducer.Alphabet_isSymbolDefined(self, s)

    def size(self):
        return _transducer.Alphabet_size(self)

    def write(self, output):
        return _transducer.Alphabet_write(self, output)

    def read(self, input):
        return _transducer.Alphabet_read(self, input)

    def serialise(self, serialised):
        return _transducer.Alphabet_serialise(self, serialised)

    def deserialise(self, serialised):
        return _transducer.Alphabet_deserialise(self, serialised)

    def writeSymbol(self, symbol, output):
        return _transducer.Alphabet_writeSymbol(self, symbol, output)

    def getSymbol(self, result, symbol, uppercase=False):
        return _transducer.Alphabet_getSymbol(self, result, symbol, uppercase)

    def isTag(self, symbol):
        return _transducer.Alphabet_isTag(self, symbol)

    def setSymbol(self, symbol, newSymbolString):
        return _transducer.Alphabet_setSymbol(self, symbol, newSymbolString)

    def decode(self, code):
        return _transducer.Alphabet_decode(self, code)
    left = _transducer.Alphabet_left
    right = _transducer.Alphabet_right

    def createLoopbackSymbols(self, *args):
        return _transducer.Alphabet_createLoopbackSymbols(self, *args)
Alphabet_swigregister = _transducer.Alphabet_swigregister
Alphabet_swigregister(Alphabet)

class IntSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.IntSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.IntSet___nonzero__(self)

    def __bool__(self):
        return _transducer.IntSet___bool__(self)

    def __len__(self):
        return _transducer.IntSet___len__(self)

    def append(self, x):
        return _transducer.IntSet_append(self, x)

    def __contains__(self, x):
        return _transducer.IntSet___contains__(self, x)

    def __getitem__(self, i):
        return _transducer.IntSet___getitem__(self, i)

    def add(self, x):
        return _transducer.IntSet_add(self, x)

    def discard(self, x):
        return _transducer.IntSet_discard(self, x)

    def __init__(self, *args):
        this = _transducer.new_IntSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _transducer.IntSet_empty(self)

    def size(self):
        return _transducer.IntSet_size(self)

    def clear(self):
        return _transducer.IntSet_clear(self)

    def swap(self, v):
        return _transducer.IntSet_swap(self, v)

    def count(self, x):
        return _transducer.IntSet_count(self, x)

    def begin(self):
        return _transducer.IntSet_begin(self)

    def end(self):
        return _transducer.IntSet_end(self)

    def rbegin(self):
        return _transducer.IntSet_rbegin(self)

    def rend(self):
        return _transducer.IntSet_rend(self)

    def erase(self, *args):
        return _transducer.IntSet_erase(self, *args)

    def find(self, x):
        return _transducer.IntSet_find(self, x)

    def lower_bound(self, x):
        return _transducer.IntSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _transducer.IntSet_upper_bound(self, x)

    def equal_range(self, x):
        return _transducer.IntSet_equal_range(self, x)

    def insert(self, __x):
        return _transducer.IntSet_insert(self, __x)
    __swig_destroy__ = _transducer.delete_IntSet
    __del__ = lambda self: None
IntSet_swigregister = _transducer.IntSet_swigregister
IntSet_swigregister(IntSet)

class IntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _transducer.new_IntPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _transducer.IntPair_first_set
    __swig_getmethods__["first"] = _transducer.IntPair_first_get
    if _newclass:
        first = _swig_property(_transducer.IntPair_first_get, _transducer.IntPair_first_set)
    __swig_setmethods__["second"] = _transducer.IntPair_second_set
    __swig_getmethods__["second"] = _transducer.IntPair_second_get
    if _newclass:
        second = _swig_property(_transducer.IntPair_second_get, _transducer.IntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _transducer.delete_IntPair
    __del__ = lambda self: None
IntPair_swigregister = _transducer.IntPair_swigregister
IntPair_swigregister(IntPair)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.IntVector___nonzero__(self)

    def __bool__(self):
        return _transducer.IntVector___bool__(self)

    def __len__(self):
        return _transducer.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _transducer.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transducer.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transducer.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transducer.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transducer.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transducer.IntVector___setitem__(self, *args)

    def pop(self):
        return _transducer.IntVector_pop(self)

    def append(self, x):
        return _transducer.IntVector_append(self, x)

    def empty(self):
        return _transducer.IntVector_empty(self)

    def size(self):
        return _transducer.IntVector_size(self)

    def swap(self, v):
        return _transducer.IntVector_swap(self, v)

    def begin(self):
        return _transducer.IntVector_begin(self)

    def end(self):
        return _transducer.IntVector_end(self)

    def rbegin(self):
        return _transducer.IntVector_rbegin(self)

    def rend(self):
        return _transducer.IntVector_rend(self)

    def clear(self):
        return _transducer.IntVector_clear(self)

    def get_allocator(self):
        return _transducer.IntVector_get_allocator(self)

    def pop_back(self):
        return _transducer.IntVector_pop_back(self)

    def erase(self, *args):
        return _transducer.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _transducer.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _transducer.IntVector_push_back(self, x)

    def front(self):
        return _transducer.IntVector_front(self)

    def back(self):
        return _transducer.IntVector_back(self)

    def assign(self, n, x):
        return _transducer.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _transducer.IntVector_resize(self, *args)

    def insert(self, *args):
        return _transducer.IntVector_insert(self, *args)

    def reserve(self, n):
        return _transducer.IntVector_reserve(self, n)

    def capacity(self):
        return _transducer.IntVector_capacity(self)
    __swig_destroy__ = _transducer.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _transducer.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.StringVector___nonzero__(self)

    def __bool__(self):
        return _transducer.StringVector___bool__(self)

    def __len__(self):
        return _transducer.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _transducer.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transducer.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transducer.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transducer.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transducer.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transducer.StringVector___setitem__(self, *args)

    def pop(self):
        return _transducer.StringVector_pop(self)

    def append(self, x):
        return _transducer.StringVector_append(self, x)

    def empty(self):
        return _transducer.StringVector_empty(self)

    def size(self):
        return _transducer.StringVector_size(self)

    def swap(self, v):
        return _transducer.StringVector_swap(self, v)

    def begin(self):
        return _transducer.StringVector_begin(self)

    def end(self):
        return _transducer.StringVector_end(self)

    def rbegin(self):
        return _transducer.StringVector_rbegin(self)

    def rend(self):
        return _transducer.StringVector_rend(self)

    def clear(self):
        return _transducer.StringVector_clear(self)

    def get_allocator(self):
        return _transducer.StringVector_get_allocator(self)

    def pop_back(self):
        return _transducer.StringVector_pop_back(self)

    def erase(self, *args):
        return _transducer.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _transducer.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _transducer.StringVector_push_back(self, x)

    def front(self):
        return _transducer.StringVector_front(self)

    def back(self):
        return _transducer.StringVector_back(self)

    def assign(self, n, x):
        return _transducer.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _transducer.StringVector_resize(self, *args)

    def insert(self, *args):
        return _transducer.StringVector_insert(self, *args)

    def reserve(self, n):
        return _transducer.StringVector_reserve(self, n)

    def capacity(self):
        return _transducer.StringVector_capacity(self)
    __swig_destroy__ = _transducer.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _transducer.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _transducer.new_StringPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _transducer.StringPair_first_set
    __swig_getmethods__["first"] = _transducer.StringPair_first_get
    if _newclass:
        first = _swig_property(_transducer.StringPair_first_get, _transducer.StringPair_first_set)
    __swig_setmethods__["second"] = _transducer.StringPair_second_set
    __swig_getmethods__["second"] = _transducer.StringPair_second_get
    if _newclass:
        second = _swig_property(_transducer.StringPair_second_get, _transducer.StringPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _transducer.delete_StringPair
    __del__ = lambda self: None
StringPair_swigregister = _transducer.StringPair_swigregister
StringPair_swigregister(StringPair)

class WstringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WstringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WstringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.WstringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.WstringVector___nonzero__(self)

    def __bool__(self):
        return _transducer.WstringVector___bool__(self)

    def __len__(self):
        return _transducer.WstringVector___len__(self)

    def __getslice__(self, i, j):
        return _transducer.WstringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transducer.WstringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transducer.WstringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transducer.WstringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transducer.WstringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transducer.WstringVector___setitem__(self, *args)

    def pop(self):
        return _transducer.WstringVector_pop(self)

    def append(self, x):
        return _transducer.WstringVector_append(self, x)

    def empty(self):
        return _transducer.WstringVector_empty(self)

    def size(self):
        return _transducer.WstringVector_size(self)

    def swap(self, v):
        return _transducer.WstringVector_swap(self, v)

    def begin(self):
        return _transducer.WstringVector_begin(self)

    def end(self):
        return _transducer.WstringVector_end(self)

    def rbegin(self):
        return _transducer.WstringVector_rbegin(self)

    def rend(self):
        return _transducer.WstringVector_rend(self)

    def clear(self):
        return _transducer.WstringVector_clear(self)

    def get_allocator(self):
        return _transducer.WstringVector_get_allocator(self)

    def pop_back(self):
        return _transducer.WstringVector_pop_back(self)

    def erase(self, *args):
        return _transducer.WstringVector_erase(self, *args)

    def __init__(self, *args):
        this = _transducer.new_WstringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _transducer.WstringVector_push_back(self, x)

    def front(self):
        return _transducer.WstringVector_front(self)

    def back(self):
        return _transducer.WstringVector_back(self)

    def assign(self, n, x):
        return _transducer.WstringVector_assign(self, n, x)

    def resize(self, *args):
        return _transducer.WstringVector_resize(self, *args)

    def insert(self, *args):
        return _transducer.WstringVector_insert(self, *args)

    def reserve(self, n):
        return _transducer.WstringVector_reserve(self, n)

    def capacity(self):
        return _transducer.WstringVector_capacity(self)
    __swig_destroy__ = _transducer.delete_WstringVector
    __del__ = lambda self: None
WstringVector_swigregister = _transducer.WstringVector_swigregister
WstringVector_swigregister(WstringVector)

class VectorPairInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPairInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPairInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.VectorPairInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.VectorPairInt___nonzero__(self)

    def __bool__(self):
        return _transducer.VectorPairInt___bool__(self)

    def __len__(self):
        return _transducer.VectorPairInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _transducer.VectorPairInt___getitem__(self, key)

    def __delitem__(self, key):
        return _transducer.VectorPairInt___delitem__(self, key)

    def has_key(self, key):
        return _transducer.VectorPairInt_has_key(self, key)

    def keys(self):
        return _transducer.VectorPairInt_keys(self)

    def values(self):
        return _transducer.VectorPairInt_values(self)

    def items(self):
        return _transducer.VectorPairInt_items(self)

    def __contains__(self, key):
        return _transducer.VectorPairInt___contains__(self, key)

    def key_iterator(self):
        return _transducer.VectorPairInt_key_iterator(self)

    def value_iterator(self):
        return _transducer.VectorPairInt_value_iterator(self)

    def __setitem__(self, *args):
        return _transducer.VectorPairInt___setitem__(self, *args)

    def asdict(self):
        return _transducer.VectorPairInt_asdict(self)

    def __init__(self, *args):
        this = _transducer.new_VectorPairInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _transducer.VectorPairInt_empty(self)

    def size(self):
        return _transducer.VectorPairInt_size(self)

    def swap(self, v):
        return _transducer.VectorPairInt_swap(self, v)

    def begin(self):
        return _transducer.VectorPairInt_begin(self)

    def end(self):
        return _transducer.VectorPairInt_end(self)

    def rbegin(self):
        return _transducer.VectorPairInt_rbegin(self)

    def rend(self):
        return _transducer.VectorPairInt_rend(self)

    def clear(self):
        return _transducer.VectorPairInt_clear(self)

    def get_allocator(self):
        return _transducer.VectorPairInt_get_allocator(self)

    def count(self, x):
        return _transducer.VectorPairInt_count(self, x)

    def erase(self, *args):
        return _transducer.VectorPairInt_erase(self, *args)

    def find(self, x):
        return _transducer.VectorPairInt_find(self, x)

    def lower_bound(self, x):
        return _transducer.VectorPairInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _transducer.VectorPairInt_upper_bound(self, x)
    __swig_destroy__ = _transducer.delete_VectorPairInt
    __del__ = lambda self: None
VectorPairInt_swigregister = _transducer.VectorPairInt_swigregister
VectorPairInt_swigregister(VectorPairInt)

class MapPairInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapPairInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapPairInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.MapPairInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.MapPairInt___nonzero__(self)

    def __bool__(self):
        return _transducer.MapPairInt___bool__(self)

    def __len__(self):
        return _transducer.MapPairInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _transducer.MapPairInt___getitem__(self, key)

    def __delitem__(self, key):
        return _transducer.MapPairInt___delitem__(self, key)

    def has_key(self, key):
        return _transducer.MapPairInt_has_key(self, key)

    def keys(self):
        return _transducer.MapPairInt_keys(self)

    def values(self):
        return _transducer.MapPairInt_values(self)

    def items(self):
        return _transducer.MapPairInt_items(self)

    def __contains__(self, key):
        return _transducer.MapPairInt___contains__(self, key)

    def key_iterator(self):
        return _transducer.MapPairInt_key_iterator(self)

    def value_iterator(self):
        return _transducer.MapPairInt_value_iterator(self)

    def __setitem__(self, *args):
        return _transducer.MapPairInt___setitem__(self, *args)

    def asdict(self):
        return _transducer.MapPairInt_asdict(self)

    def __init__(self, *args):
        this = _transducer.new_MapPairInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _transducer.MapPairInt_empty(self)

    def size(self):
        return _transducer.MapPairInt_size(self)

    def swap(self, v):
        return _transducer.MapPairInt_swap(self, v)

    def begin(self):
        return _transducer.MapPairInt_begin(self)

    def end(self):
        return _transducer.MapPairInt_end(self)

    def rbegin(self):
        return _transducer.MapPairInt_rbegin(self)

    def rend(self):
        return _transducer.MapPairInt_rend(self)

    def clear(self):
        return _transducer.MapPairInt_clear(self)

    def get_allocator(self):
        return _transducer.MapPairInt_get_allocator(self)

    def count(self, x):
        return _transducer.MapPairInt_count(self, x)

    def erase(self, *args):
        return _transducer.MapPairInt_erase(self, *args)

    def find(self, x):
        return _transducer.MapPairInt_find(self, x)

    def lower_bound(self, x):
        return _transducer.MapPairInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _transducer.MapPairInt_upper_bound(self, x)
    __swig_destroy__ = _transducer.delete_MapPairInt
    __del__ = lambda self: None
MapPairInt_swigregister = _transducer.MapPairInt_swigregister
MapPairInt_swigregister(MapPairInt)

class StringPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.StringPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.StringPairVector___nonzero__(self)

    def __bool__(self):
        return _transducer.StringPairVector___bool__(self)

    def __len__(self):
        return _transducer.StringPairVector___len__(self)

    def __getslice__(self, i, j):
        return _transducer.StringPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transducer.StringPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transducer.StringPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transducer.StringPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transducer.StringPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transducer.StringPairVector___setitem__(self, *args)

    def pop(self):
        return _transducer.StringPairVector_pop(self)

    def append(self, x):
        return _transducer.StringPairVector_append(self, x)

    def empty(self):
        return _transducer.StringPairVector_empty(self)

    def size(self):
        return _transducer.StringPairVector_size(self)

    def swap(self, v):
        return _transducer.StringPairVector_swap(self, v)

    def begin(self):
        return _transducer.StringPairVector_begin(self)

    def end(self):
        return _transducer.StringPairVector_end(self)

    def rbegin(self):
        return _transducer.StringPairVector_rbegin(self)

    def rend(self):
        return _transducer.StringPairVector_rend(self)

    def clear(self):
        return _transducer.StringPairVector_clear(self)

    def get_allocator(self):
        return _transducer.StringPairVector_get_allocator(self)

    def pop_back(self):
        return _transducer.StringPairVector_pop_back(self)

    def erase(self, *args):
        return _transducer.StringPairVector_erase(self, *args)

    def __init__(self, *args):
        this = _transducer.new_StringPairVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _transducer.StringPairVector_push_back(self, x)

    def front(self):
        return _transducer.StringPairVector_front(self)

    def back(self):
        return _transducer.StringPairVector_back(self)

    def assign(self, n, x):
        return _transducer.StringPairVector_assign(self, n, x)

    def resize(self, *args):
        return _transducer.StringPairVector_resize(self, *args)

    def insert(self, *args):
        return _transducer.StringPairVector_insert(self, *args)

    def reserve(self, n):
        return _transducer.StringPairVector_reserve(self, n)

    def capacity(self):
        return _transducer.StringPairVector_capacity(self)
    __swig_destroy__ = _transducer.delete_StringPairVector
    __del__ = lambda self: None
StringPairVector_swigregister = _transducer.StringPairVector_swigregister
StringPairVector_swigregister(StringPairVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.FloatVector___nonzero__(self)

    def __bool__(self):
        return _transducer.FloatVector___bool__(self)

    def __len__(self):
        return _transducer.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _transducer.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _transducer.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _transducer.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _transducer.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _transducer.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _transducer.FloatVector___setitem__(self, *args)

    def pop(self):
        return _transducer.FloatVector_pop(self)

    def append(self, x):
        return _transducer.FloatVector_append(self, x)

    def empty(self):
        return _transducer.FloatVector_empty(self)

    def size(self):
        return _transducer.FloatVector_size(self)

    def swap(self, v):
        return _transducer.FloatVector_swap(self, v)

    def begin(self):
        return _transducer.FloatVector_begin(self)

    def end(self):
        return _transducer.FloatVector_end(self)

    def rbegin(self):
        return _transducer.FloatVector_rbegin(self)

    def rend(self):
        return _transducer.FloatVector_rend(self)

    def clear(self):
        return _transducer.FloatVector_clear(self)

    def get_allocator(self):
        return _transducer.FloatVector_get_allocator(self)

    def pop_back(self):
        return _transducer.FloatVector_pop_back(self)

    def erase(self, *args):
        return _transducer.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _transducer.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _transducer.FloatVector_push_back(self, x)

    def front(self):
        return _transducer.FloatVector_front(self)

    def back(self):
        return _transducer.FloatVector_back(self)

    def assign(self, n, x):
        return _transducer.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _transducer.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _transducer.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _transducer.FloatVector_reserve(self, n)

    def capacity(self):
        return _transducer.FloatVector_capacity(self)
    __swig_destroy__ = _transducer.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _transducer.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.StringSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.StringSet___nonzero__(self)

    def __bool__(self):
        return _transducer.StringSet___bool__(self)

    def __len__(self):
        return _transducer.StringSet___len__(self)

    def append(self, x):
        return _transducer.StringSet_append(self, x)

    def __contains__(self, x):
        return _transducer.StringSet___contains__(self, x)

    def __getitem__(self, i):
        return _transducer.StringSet___getitem__(self, i)

    def add(self, x):
        return _transducer.StringSet_add(self, x)

    def discard(self, x):
        return _transducer.StringSet_discard(self, x)

    def __init__(self, *args):
        this = _transducer.new_StringSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _transducer.StringSet_empty(self)

    def size(self):
        return _transducer.StringSet_size(self)

    def clear(self):
        return _transducer.StringSet_clear(self)

    def swap(self, v):
        return _transducer.StringSet_swap(self, v)

    def count(self, x):
        return _transducer.StringSet_count(self, x)

    def begin(self):
        return _transducer.StringSet_begin(self)

    def end(self):
        return _transducer.StringSet_end(self)

    def rbegin(self):
        return _transducer.StringSet_rbegin(self)

    def rend(self):
        return _transducer.StringSet_rend(self)

    def erase(self, *args):
        return _transducer.StringSet_erase(self, *args)

    def find(self, x):
        return _transducer.StringSet_find(self, x)

    def lower_bound(self, x):
        return _transducer.StringSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _transducer.StringSet_upper_bound(self, x)

    def equal_range(self, x):
        return _transducer.StringSet_equal_range(self, x)

    def insert(self, __x):
        return _transducer.StringSet_insert(self, __x)
    __swig_destroy__ = _transducer.delete_StringSet
    __del__ = lambda self: None
StringSet_swigregister = _transducer.StringSet_swigregister
StringSet_swigregister(StringSet)

class StringPairSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringPairSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringPairSet, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.StringPairSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.StringPairSet___nonzero__(self)

    def __bool__(self):
        return _transducer.StringPairSet___bool__(self)

    def __len__(self):
        return _transducer.StringPairSet___len__(self)

    def append(self, x):
        return _transducer.StringPairSet_append(self, x)

    def __contains__(self, x):
        return _transducer.StringPairSet___contains__(self, x)

    def __getitem__(self, i):
        return _transducer.StringPairSet___getitem__(self, i)

    def add(self, x):
        return _transducer.StringPairSet_add(self, x)

    def discard(self, x):
        return _transducer.StringPairSet_discard(self, x)

    def __init__(self, *args):
        this = _transducer.new_StringPairSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _transducer.StringPairSet_empty(self)

    def size(self):
        return _transducer.StringPairSet_size(self)

    def clear(self):
        return _transducer.StringPairSet_clear(self)

    def swap(self, v):
        return _transducer.StringPairSet_swap(self, v)

    def count(self, x):
        return _transducer.StringPairSet_count(self, x)

    def begin(self):
        return _transducer.StringPairSet_begin(self)

    def end(self):
        return _transducer.StringPairSet_end(self)

    def rbegin(self):
        return _transducer.StringPairSet_rbegin(self)

    def rend(self):
        return _transducer.StringPairSet_rend(self)

    def erase(self, *args):
        return _transducer.StringPairSet_erase(self, *args)

    def find(self, x):
        return _transducer.StringPairSet_find(self, x)

    def lower_bound(self, x):
        return _transducer.StringPairSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _transducer.StringPairSet_upper_bound(self, x)

    def equal_range(self, x):
        return _transducer.StringPairSet_equal_range(self, x)

    def insert(self, __x):
        return _transducer.StringPairSet_insert(self, __x)
    __swig_destroy__ = _transducer.delete_StringPairSet
    __del__ = lambda self: None
StringPairSet_swigregister = _transducer.StringPairSet_swigregister
StringPairSet_swigregister(StringPairSet)

class TransitionMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransitionMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransitionMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _transducer.TransitionMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _transducer.TransitionMap___nonzero__(self)

    def __bool__(self):
        return _transducer.TransitionMap___bool__(self)

    def __len__(self):
        return _transducer.TransitionMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _transducer.TransitionMap___getitem__(self, key)

    def __delitem__(self, key):
        return _transducer.TransitionMap___delitem__(self, key)

    def has_key(self, key):
        return _transducer.TransitionMap_has_key(self, key)

    def keys(self):
        return _transducer.TransitionMap_keys(self)

    def values(self):
        return _transducer.TransitionMap_values(self)

    def items(self):
        return _transducer.TransitionMap_items(self)

    def __contains__(self, key):
        return _transducer.TransitionMap___contains__(self, key)

    def key_iterator(self):
        return _transducer.TransitionMap_key_iterator(self)

    def value_iterator(self):
        return _transducer.TransitionMap_value_iterator(self)

    def __setitem__(self, *args):
        return _transducer.TransitionMap___setitem__(self, *args)

    def asdict(self):
        return _transducer.TransitionMap_asdict(self)

    def __init__(self, *args):
        this = _transducer.new_TransitionMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _transducer.TransitionMap_empty(self)

    def size(self):
        return _transducer.TransitionMap_size(self)

    def swap(self, v):
        return _transducer.TransitionMap_swap(self, v)

    def begin(self):
        return _transducer.TransitionMap_begin(self)

    def end(self):
        return _transducer.TransitionMap_end(self)

    def rbegin(self):
        return _transducer.TransitionMap_rbegin(self)

    def rend(self):
        return _transducer.TransitionMap_rend(self)

    def clear(self):
        return _transducer.TransitionMap_clear(self)

    def get_allocator(self):
        return _transducer.TransitionMap_get_allocator(self)

    def count(self, x):
        return _transducer.TransitionMap_count(self, x)

    def erase(self, *args):
        return _transducer.TransitionMap_erase(self, *args)

    def find(self, x):
        return _transducer.TransitionMap_find(self, x)

    def lower_bound(self, x):
        return _transducer.TransitionMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _transducer.TransitionMap_upper_bound(self, x)
    __swig_destroy__ = _transducer.delete_TransitionMap
    __del__ = lambda self: None
TransitionMap_swigregister = _transducer.TransitionMap_swigregister
TransitionMap_swigregister(TransitionMap)

# This file is compatible with both classic and new-style classes.


